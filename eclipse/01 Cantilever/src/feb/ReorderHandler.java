/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package feb;

public class ReorderHandler {
  private long swigCPtr;
  public boolean swigCMemOwn;

  public ReorderHandler(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  public static long getCPtr(ReorderHandler obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        karambaJNI.delete_ReorderHandler(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public ReorderHandler(Model model) {
    this(karambaJNI.new_ReorderHandler__SWIG_1(Model.getCPtr(model), model), true);
  }

  public ReorderHandler(ReorderHandler arg) {
    this(karambaJNI.new_ReorderHandler__SWIG_2(ReorderHandler.getCPtr(arg), arg), true);
  }

  public ReorderHandler clone(SWIGTYPE_p_std__mapT_void_const_p_void_p_t mapDict) {
    long cPtr = karambaJNI.ReorderHandler_clone__SWIG_0(swigCPtr, this, SWIGTYPE_p_std__mapT_void_const_p_void_p_t.getCPtr(mapDict));
    return (cPtr == 0) ? null : new ReorderHandler(cPtr, false);
  }

  public ReorderHandler clone() {
    long cPtr = karambaJNI.ReorderHandler_clone__SWIG_1(swigCPtr, this);
    return (cPtr == 0) ? null : new ReorderHandler(cPtr, false);
  }

  public void copy(ReorderHandler orig) {
    karambaJNI.ReorderHandler_copy(swigCPtr, this, ReorderHandler.getCPtr(orig), orig);
  }

  public void update() {
    karambaJNI.ReorderHandler_update(swigCPtr, this);
  }

  public long numGraphNodes() {
    return karambaJNI.ReorderHandler_numGraphNodes(swigCPtr, this);
  }

  public boolean nodeIsActive(long ind) {
    return karambaJNI.ReorderHandler_nodeIsActive(swigCPtr, this, ind);
  }

  public long optiNodeInd(long ind) {
    return karambaJNI.ReorderHandler_optiNodeInd(swigCPtr, this, ind);
  }

  public VectLong connectedNodes() {
    return new VectLong(karambaJNI.ReorderHandler_connectedNodes(swigCPtr, this), true);
  }

}
