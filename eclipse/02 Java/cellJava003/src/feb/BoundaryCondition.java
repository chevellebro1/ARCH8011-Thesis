/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package feb;

public class BoundaryCondition extends DeepCloneable {
  private long swigCPtr;

  protected BoundaryCondition(long cPtr, boolean cMemoryOwn) {
    super(karambaJNI.BoundaryCondition_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  protected static long getCPtr(BoundaryCondition obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        karambaJNI.delete_BoundaryCondition(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public void setType(BoundaryCondition.BCType value) {
    karambaJNI.BoundaryCondition_type_set(swigCPtr, this, value.swigValue());
  }

  public BoundaryCondition.BCType getType() {
    return BoundaryCondition.BCType.swigToEnum(karambaJNI.BoundaryCondition_type_get(swigCPtr, this));
  }

  public void setNode_ind(int value) {
    karambaJNI.BoundaryCondition_node_ind_set(swigCPtr, this, value);
  }

  public int getNode_ind() {
    return karambaJNI.BoundaryCondition_node_ind_get(swigCPtr, this);
  }

  public void setLc_num(int value) {
    karambaJNI.BoundaryCondition_lc_num_set(swigCPtr, this, value);
  }

  public int getLc_num() {
    return karambaJNI.BoundaryCondition_lc_num_get(swigCPtr, this);
  }

  public void setDof(Node.DOF value) {
    karambaJNI.BoundaryCondition_dof_set(swigCPtr, this, value.swigValue());
  }

  public Node.DOF getDof() {
    return Node.DOF.swigToEnum(karambaJNI.BoundaryCondition_dof_get(swigCPtr, this));
  }

  public void setVal(double value) {
    karambaJNI.BoundaryCondition_val_set(swigCPtr, this, value);
  }

  public double getVal() {
    return karambaJNI.BoundaryCondition_val_get(swigCPtr, this);
  }

  public BoundaryCondition(int node_ind, Node.DOF dof, BoundaryCondition.BCType type, double val, int lc_num) {
    this(karambaJNI.new_BoundaryCondition__SWIG_1(node_ind, dof.swigValue(), type.swigValue(), val, lc_num), true);
  }

  public BoundaryCondition(int node_ind, Node.DOF dof, BoundaryCondition.BCType type, double val) {
    this(karambaJNI.new_BoundaryCondition__SWIG_2(node_ind, dof.swigValue(), type.swigValue(), val), true);
  }

  public BoundaryCondition(BoundaryCondition arg) {
    this(karambaJNI.new_BoundaryCondition__SWIG_3(BoundaryCondition.getCPtr(arg), arg), true);
  }

  public DeepCloneable clone(SWIGTYPE_p_std__mapT_void_const_p_void_p_t mapDict) {
    long cPtr = karambaJNI.BoundaryCondition_clone__SWIG_0(swigCPtr, this, SWIGTYPE_p_std__mapT_void_const_p_void_p_t.getCPtr(mapDict));
    return (cPtr == 0) ? null : new BoundaryCondition(cPtr, false);
  }

  public DeepCloneable clone() {
    long cPtr = karambaJNI.BoundaryCondition_clone__SWIG_1(swigCPtr, this);
    return (cPtr == 0) ? null : new BoundaryCondition(cPtr, false);
  }

  public void copy(BoundaryCondition orig) {
    karambaJNI.BoundaryCondition_copy(swigCPtr, this, BoundaryCondition.getCPtr(orig), orig);
  }

  public void updateReaction(Model model) {
    karambaJNI.BoundaryCondition_updateReaction(swigCPtr, this, Model.getCPtr(model), model);
  }

  public double reaction(long num_lc) {
    return karambaJNI.BoundaryCondition_reaction__SWIG_0(swigCPtr, this, num_lc);
  }

  public SWIGTYPE_p_VecReal reaction() {
    return new SWIGTYPE_p_VecReal(karambaJNI.BoundaryCondition_reaction__SWIG_1(swigCPtr, this), false);
  }

  public boolean isActive() {
    return karambaJNI.BoundaryCondition_isActive(swigCPtr, this);
  }

  public long ind(long new_ind) {
    return karambaJNI.BoundaryCondition_ind__SWIG_0(swigCPtr, this, new_ind);
  }

  public long ind() {
    return karambaJNI.BoundaryCondition_ind__SWIG_1(swigCPtr, this);
  }

  public final static class BCType {
    public final static BoundaryCondition.BCType force = new BoundaryCondition.BCType("force");
    public final static BoundaryCondition.BCType disp = new BoundaryCondition.BCType("disp");

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static BCType swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + BCType.class + " with value " + swigValue);
    }

    private BCType(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private BCType(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private BCType(String swigName, BCType swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static BCType[] swigValues = { force, disp };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

}
