/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package feb;

public class InterShape extends GeMapping {
  private long swigCPtr;

  protected InterShape(long cPtr, boolean cMemoryOwn) {
    super(karambaJNI.InterShape_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  protected static long getCPtr(InterShape obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        karambaJNI.delete_InterShape(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public InterShape() {
    this(karambaJNI.new_InterShape__SWIG_0(), true);
  }

  public InterShape(InterShape arg) {
    this(karambaJNI.new_InterShape__SWIG_1(InterShape.getCPtr(arg), arg), true);
  }

  public GeMapping clone(SWIGTYPE_p_std__mapT_void_const_p_void_p_t mapDict) {
    long cPtr = karambaJNI.InterShape_clone__SWIG_0(swigCPtr, this, SWIGTYPE_p_std__mapT_void_const_p_void_p_t.getCPtr(mapDict));
    return (cPtr == 0) ? null : new InterShape(cPtr, false);
  }

  public GeMapping clone() {
    long cPtr = karambaJNI.InterShape_clone__SWIG_1(swigCPtr, this);
    return (cPtr == 0) ? null : new InterShape(cPtr, false);
  }

  public void copy(InterShape orig) {
    karambaJNI.InterShape_copy(swigCPtr, this, InterShape.getCPtr(orig), orig);
  }

  public long parametersPerConnection() {
    return karambaJNI.InterShape_parametersPerConnection(swigCPtr, this);
  }

  public void add(Model model) {
    karambaJNI.InterShape_add(swigCPtr, this, Model.getCPtr(model), model);
  }

  public long numberOfParameters() {
    return karambaJNI.InterShape_numberOfParameters(swigCPtr, this);
  }

  public void map(GeModel gemodel, SWIGTYPE_p_std__vectorT_double_t__const_iterator params_begin, SWIGTYPE_p_std__vectorT_double_t__const_iterator params_end) {
    karambaJNI.InterShape_map(swigCPtr, this, GeModel.getCPtr(gemodel), gemodel, SWIGTYPE_p_std__vectorT_double_t__const_iterator.getCPtr(params_begin), SWIGTYPE_p_std__vectorT_double_t__const_iterator.getCPtr(params_end));
  }

}
