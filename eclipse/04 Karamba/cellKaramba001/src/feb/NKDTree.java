/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package feb;

public class NKDTree extends DeepCloneable {
  private long swigCPtr;

  protected NKDTree(long cPtr, boolean cMemoryOwn) {
    super(karambaJNI.NKDTree_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  protected static long getCPtr(NKDTree obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        karambaJNI.delete_NKDTree(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public NKDTree(long number_of_points) {
    this(karambaJNI.new_NKDTree__SWIG_0(number_of_points), true);
  }

  public NKDTree() {
    this(karambaJNI.new_NKDTree__SWIG_1(), true);
  }

  public NKDTree(NKDTree arg, SWIGTYPE_p_std__mapT_void_const_p_void_p_t mapDict) {
    this(karambaJNI.new_NKDTree__SWIG_2(NKDTree.getCPtr(arg), arg, SWIGTYPE_p_std__mapT_void_const_p_void_p_t.getCPtr(mapDict)), true);
  }

  public NKDTree(NKDTree arg) {
    this(karambaJNI.new_NKDTree__SWIG_3(NKDTree.getCPtr(arg), arg), true);
  }

  public void copy(NKDTree orig, SWIGTYPE_p_std__mapT_void_const_p_void_p_t mapDict) {
    karambaJNI.NKDTree_copy__SWIG_0(swigCPtr, this, NKDTree.getCPtr(orig), orig, SWIGTYPE_p_std__mapT_void_const_p_void_p_t.getCPtr(mapDict));
  }

  public void copy(NKDTree orig) {
    karambaJNI.NKDTree_copy__SWIG_1(swigCPtr, this, NKDTree.getCPtr(orig), orig);
  }

  public DeepCloneable clone(SWIGTYPE_p_std__mapT_void_const_p_void_p_t mapDict) {
    long cPtr = karambaJNI.NKDTree_clone__SWIG_0(swigCPtr, this, SWIGTYPE_p_std__mapT_void_const_p_void_p_t.getCPtr(mapDict));
    return (cPtr == 0) ? null : new NKDTree(cPtr, false);
  }

  public DeepCloneable clone() {
    long cPtr = karambaJNI.NKDTree_clone__SWIG_1(swigCPtr, this);
    return (cPtr == 0) ? null : new NKDTree(cPtr, false);
  }

  public void insert(double x, double y, double z) {
    karambaJNI.NKDTree_insert(swigCPtr, this, x, y, z);
  }

  public int nearest(double x, double y, double z) {
    return karambaJNI.NKDTree_nearest__SWIG_0(swigCPtr, this, x, y, z);
  }

  public VectInt nearest(double x, double y, double z, double limit_dist) {
    return new VectInt(karambaJNI.NKDTree_nearest__SWIG_1(swigCPtr, this, x, y, z, limit_dist), true);
  }

  public int isNear(double x, double y, double z, double square_limit_dist) {
    return karambaJNI.NKDTree_isNear(swigCPtr, this, x, y, z, square_limit_dist);
  }

  public VectInt nNearest(double x, double y, double z, int num_results) {
    return new VectInt(karambaJNI.NKDTree_nNearest(swigCPtr, this, x, y, z, num_results), true);
  }

  public VectInt rNearest(double x, double y, double z, double r) {
    return new VectInt(karambaJNI.NKDTree_rNearest(swigCPtr, this, x, y, z, r), true);
  }

  public Vec3d point(int ind) {
    return new Vec3d(karambaJNI.NKDTree_point(swigCPtr, this, ind), true);
  }

  public int snapIndex(int ind) {
    return karambaJNI.NKDTree_snapIndex(swigCPtr, this, ind);
  }

  public int snapIndex_nearest(double x, double y, double z) {
    return karambaJNI.NKDTree_snapIndex_nearest(swigCPtr, this, x, y, z);
  }

  public Vec3d snapPoint_nearest(int snap_index) {
    return new Vec3d(karambaJNI.NKDTree_snapPoint_nearest(swigCPtr, this, snap_index), true);
  }

  public int snapIndex_isNear(double x, double y, double z, double square_limit_dist) {
    return karambaJNI.NKDTree_snapIndex_isNear(swigCPtr, this, x, y, z, square_limit_dist);
  }

  public void order() {
    karambaJNI.NKDTree_order__SWIG_0(swigCPtr, this);
  }

  public VectInt order(double limit_dist, long do_not_snap_first_n) {
    return new VectInt(karambaJNI.NKDTree_order__SWIG_1(swigCPtr, this, limit_dist, do_not_snap_first_n), true);
  }

  public VectInt order(double limit_dist) {
    return new VectInt(karambaJNI.NKDTree_order__SWIG_2(swigCPtr, this, limit_dist), true);
  }

  public boolean containsNoElements() {
    return karambaJNI.NKDTree_containsNoElements(swigCPtr, this);
  }

  public long numberOfPoints() {
    return karambaJNI.NKDTree_numberOfPoints(swigCPtr, this);
  }

  public double limitDist() {
    return karambaJNI.NKDTree_limitDist(swigCPtr, this);
  }

}
