/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package feb;

public class TriStream {
  private long swigCPtr;
  public boolean swigCMemOwn;

  public TriStream(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  public static long getCPtr(TriStream obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        karambaJNI.delete_TriStream(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public TriStream(Mesh mesh, VectVec3d nodal_disp_pos, long maxits, double Ltol, double dLtol) {
    this(karambaJNI.new_TriStream__SWIG_0(Mesh.getCPtr(mesh), mesh, VectVec3d.getCPtr(nodal_disp_pos), nodal_disp_pos, maxits, Ltol, dLtol), true);
  }

  public TriStream(Mesh mesh, VectVec3d nodal_disp_pos, long maxits, double Ltol) {
    this(karambaJNI.new_TriStream__SWIG_1(Mesh.getCPtr(mesh), mesh, VectVec3d.getCPtr(nodal_disp_pos), nodal_disp_pos, maxits, Ltol), true);
  }

  public TriStream(Mesh mesh, VectVec3d nodal_disp_pos, long maxits) {
    this(karambaJNI.new_TriStream__SWIG_2(Mesh.getCPtr(mesh), mesh, VectVec3d.getCPtr(nodal_disp_pos), nodal_disp_pos, maxits), true);
  }

  public TriStream(Mesh mesh, VectVec3d nodal_disp_pos) {
    this(karambaJNI.new_TriStream__SWIG_3(Mesh.getCPtr(mesh), mesh, VectVec3d.getCPtr(nodal_disp_pos), nodal_disp_pos), true);
  }

  public long addNodalScals(VectReal nscals) {
    return karambaJNI.TriStream_addNodalScals(swigCPtr, this, VectReal.getCPtr(nscals), nscals);
  }

  public long addNodalVecs(VectVec3d nvecs) {
    return karambaJNI.TriStream_addNodalVecs(swigCPtr, this, VectVec3d.getCPtr(nvecs), nvecs);
  }

  public long addElemVecs(VectVec3d nvecs) {
    return karambaJNI.TriStream_addElemVecs(swigCPtr, this, VectVec3d.getCPtr(nvecs), nvecs);
  }

  public void traceNodalDirections(long res_ind, TriStreamTriangle str_tri, Vec3d x0, TriStreamParticle particle, SWIGTYPE_p_std__vectorT_std__vectorT_FlowPathPos_t_t pathes, SWIGTYPE_p_std__setT_TriStreamTriangle_p_t str_tri_visited, long max_iter) {
    karambaJNI.TriStream_traceNodalDirections__SWIG_0(swigCPtr, this, res_ind, TriStreamTriangle.getCPtr(str_tri), str_tri, Vec3d.getCPtr(x0), x0, TriStreamParticle.getCPtr(particle), particle, SWIGTYPE_p_std__vectorT_std__vectorT_FlowPathPos_t_t.getCPtr(pathes), SWIGTYPE_p_std__setT_TriStreamTriangle_p_t.getCPtr(str_tri_visited), max_iter);
  }

  public void traceNodalDirections(long res_ind, TriStreamTriangle str_tri, Vec3d x0, TriStreamParticle particle, SWIGTYPE_p_std__vectorT_std__vectorT_FlowPathPos_t_t pathes, SWIGTYPE_p_std__setT_TriStreamTriangle_p_t str_tri_visited) {
    karambaJNI.TriStream_traceNodalDirections__SWIG_1(swigCPtr, this, res_ind, TriStreamTriangle.getCPtr(str_tri), str_tri, Vec3d.getCPtr(x0), x0, TriStreamParticle.getCPtr(particle), particle, SWIGTYPE_p_std__vectorT_std__vectorT_FlowPathPos_t_t.getCPtr(pathes), SWIGTYPE_p_std__setT_TriStreamTriangle_p_t.getCPtr(str_tri_visited));
  }

  public void traceNodalDirections(long res_ind, Vec3d p1, Vec3d p2, double sec_length, long max_iter, boolean inertia) {
    karambaJNI.TriStream_traceNodalDirections__SWIG_2(swigCPtr, this, res_ind, Vec3d.getCPtr(p1), p1, Vec3d.getCPtr(p2), p2, sec_length, max_iter, inertia);
  }

  public void traceNodalDirections(long res_ind, Vec3d p1, Vec3d p2, double sec_length, long max_iter) {
    karambaJNI.TriStream_traceNodalDirections__SWIG_3(swigCPtr, this, res_ind, Vec3d.getCPtr(p1), p1, Vec3d.getCPtr(p2), p2, sec_length, max_iter);
  }

  public void traceNodalDirections(long res_ind, Vec3d p1, Vec3d p2, double sec_length) {
    karambaJNI.TriStream_traceNodalDirections__SWIG_4(swigCPtr, this, res_ind, Vec3d.getCPtr(p1), p1, Vec3d.getCPtr(p2), p2, sec_length);
  }

  public void traceNodalDirections(long res_ind, Vec3d p1, Vec3d p2) {
    karambaJNI.TriStream_traceNodalDirections__SWIG_5(swigCPtr, this, res_ind, Vec3d.getCPtr(p1), p1, Vec3d.getCPtr(p2), p2);
  }

  public double traceIsoLine(long res_ind, TriStreamTriangle str_tri, Vec3d x0, TriStreamParticle particle, SWIGTYPE_p_std__vectorT_std__vectorT_FlowPathPos_t_t pathes, SWIGTYPE_p_std__setT_TriStreamTriangle_p_t str_tri_visited) {
    return karambaJNI.TriStream_traceIsoLine__SWIG_0(swigCPtr, this, res_ind, TriStreamTriangle.getCPtr(str_tri), str_tri, Vec3d.getCPtr(x0), x0, TriStreamParticle.getCPtr(particle), particle, SWIGTYPE_p_std__vectorT_std__vectorT_FlowPathPos_t_t.getCPtr(pathes), SWIGTYPE_p_std__setT_TriStreamTriangle_p_t.getCPtr(str_tri_visited));
  }

  public VectReal traceIsoLine(long res_ind, Vec3d p1, Vec3d p2, double sec_length) {
    return new VectReal(karambaJNI.TriStream_traceIsoLine__SWIG_1(swigCPtr, this, res_ind, Vec3d.getCPtr(p1), p1, Vec3d.getCPtr(p2), p2, sec_length), true);
  }

  public VectReal traceIsoLine(long res_ind, Vec3d p1, Vec3d p2) {
    return new VectReal(karambaJNI.TriStream_traceIsoLine__SWIG_2(swigCPtr, this, res_ind, Vec3d.getCPtr(p1), p1, Vec3d.getCPtr(p2), p2), true);
  }

  public long numberOfFlowPaths() {
    return karambaJNI.TriStream_numberOfFlowPaths(swigCPtr, this);
  }

  public VectFlowPathPos flowpath(long ind) {
    return new VectFlowPathPos(karambaJNI.TriStream_flowpath(swigCPtr, this, ind), false);
  }

}
