/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package feb;

public class PointState extends DeepCloneable {
  private long swigCPtr;

  protected PointState(long cPtr, boolean cMemoryOwn) {
    super(karambaJNI.PointState_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  protected static long getCPtr(PointState obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        karambaJNI.delete_PointState(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public DeepCloneable clone(SWIGTYPE_p_std__mapT_void_const_p_void_p_t mapDict) {
    long cPtr = karambaJNI.PointState_clone__SWIG_0(swigCPtr, this, SWIGTYPE_p_std__mapT_void_const_p_void_p_t.getCPtr(mapDict));
    return (cPtr == 0) ? null : new PointState(cPtr, false);
  }

  public DeepCloneable clone() {
    long cPtr = karambaJNI.PointState_clone__SWIG_1(swigCPtr, this);
    return (cPtr == 0) ? null : new PointState(cPtr, false);
  }

  public void copy(PointState orig) {
    karambaJNI.PointState_copy(swigCPtr, this, PointState.getCPtr(orig), orig);
  }

  public void clear() {
    karambaJNI.PointState_clear(swigCPtr, this);
  }

  public void scale(double fac) {
    karambaJNI.PointState_scale(swigCPtr, this, fac);
  }

  public void add(PointState other) {
    karambaJNI.PointState_add(swigCPtr, this, PointState.getCPtr(other), other);
  }

  public double disp(int ind) {
    return karambaJNI.PointState_disp__SWIG_0(swigCPtr, this, ind);
  }

  public SWIGTYPE_p_VecReal disp() {
    return new SWIGTYPE_p_VecReal(karambaJNI.PointState_disp__SWIG_1(swigCPtr, this), false);
  }

  public void updateDisplacements(SWIGTYPE_p_VecReal disp) {
    karambaJNI.PointState_updateDisplacements(swigCPtr, this, SWIGTYPE_p_VecReal.getCPtr(disp));
  }

  public Vec3d dispTransGlobal() {
    return new Vec3d(karambaJNI.PointState_dispTransGlobal(swigCPtr, this), true);
  }

  public double resDispTrans() {
    return karambaJNI.PointState_resDispTrans(swigCPtr, this);
  }

  public double force(int ind) {
    return karambaJNI.PointState_force__SWIG_0(swigCPtr, this, ind);
  }

  public SWIGTYPE_p_VecReal force() {
    return new SWIGTYPE_p_VecReal(karambaJNI.PointState_force__SWIG_1(swigCPtr, this), false);
  }

}
